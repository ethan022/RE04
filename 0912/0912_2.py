# Python 리스트 메서드 완전 가이드

# ============================================
# 요소 추가 메서드
# ============================================

numbers = [10, 21, 15, 22, 54]

# append() 메서드: 리스트의 끝에 하나의 요소를 추가
numbers.append(20)
print(numbers)  # [10, 21, 15, 22, 54, 20]

numbers.append(12)
print(numbers)  # [10, 21, 15, 22, 54, 20, 12]

# extend() 메서드: 리스트의 끝에 반복 가능한 객체의 모든 요소를 추가
numbers.extend([19])  # 리스트 [19]의 요소인 19를 추가
print(numbers)  # [10, 21, 15, 22, 54, 20, 12, 19]

numbers.extend([5, 29])  # 리스트 [5, 29]의 모든 요소를 개별적으로 추가
print(numbers)  # [10, 21, 15, 22, 54, 20, 12, 19, 5, 29]

# ============================================
# append vs extend 차이점 비교
# ============================================

# append: 전달받은 객체를 하나의 요소로 추가 (객체 자체가 추가됨)
numbers.append([1, 2, 3])  # 리스트 [1, 2, 3] 전체가 하나의 요소로 추가
print(numbers)  # [10, 21, 15, 22, 54, 20, 12, 19, 5, 29, [1, 2, 3]]

# extend: 반복 가능한 객체의 각 요소들을 개별적으로 추가
list2 = [6, 7, 8]
numbers.extend(list2)  # list2의 각 요소 6, 7, 8이 개별적으로 추가됨
print(numbers)  # [10, 21, 15, 22, 54, 20, 12, 19, 5, 29, [1, 2, 3], 6, 7, 8]

# insert() 메서드: 지정된 인덱스에 요소를 삽입
# numbers.insert(2, 30)  # 인덱스 2 위치에 30을 삽입
# print(numbers)  # 인덱스 2에 30이 삽입되고, 기존 요소들은 뒤로 밀림

# ============================================
# 요소 삭제 메서드
# ============================================

fruits = ["사과", "바나나", "오렌지", "바나나", "포도"]

# remove() 메서드: 지정된 값의 첫 번째 발견 요소를 제거
fruits.remove('바나나')  # 첫 번째 '바나나'만 제거됨 (두 번째 '바나나'는 남아있음)
print(fruits)  # ['사과', '오렌지', '바나나', '포도']

# pop() 메서드: 지정된 인덱스의 요소를 제거하고 반환 (기본값은 마지막 요소)
removed = fruits.pop()  # 마지막 요소인 '포도'를 제거하고 반환
print(removed)  # 포도
print(fruits)  # ['사과', '오렌지', '바나나']

# pop(인덱스) 메서드: 특정 인덱스의 요소를 제거하고 반환
removed = fruits.pop(1)  # 인덱스 1의 요소인 '오렌지'를 제거하고 반환
print(removed)  # 오렌지
print(fruits)  # ['사과', '바나나']

# clear() 메서드: 리스트의 모든 요소를 제거 (리스트는 빈 상태가 됨)
fruits.clear()
print(fruits)  # []

# ============================================
# 요소 검색, 정렬 메서드
# ============================================

numbers = [1, 2, 6, 9, 5, 3, 2, 4, 7]

# index() 메서드: 지정된 값의 첫 번째 인덱스를 반환
idx = numbers.index(6)  # 값 6이 처음 나타나는 인덱스를 찾기
print('idx: ', idx)  # idx: 2 (인덱스 2에 6이 있음)

idx = numbers.index(9)  # 값 9가 처음 나타나는 인덱스를 찾기
print('idx: ', idx)  # idx: 3 (인덱스 3에 9가 있음)

# count() 메서드: 지정된 값이 리스트에 나타나는 횟수를 반환
count = numbers.count(2)  # 값 2가 리스트에 몇 번 나타나는지 세기
print('count: ', count)  # count: 2 (2가 두 번 나타남)

# sort() 메서드: 원본 리스트를 직접 정렬 (원본 리스트가 변경됨)
numbers.sort()  # 오름차순으로 정렬 (작은 수부터 큰 수 순서)
print('numbers: ', numbers)  # numbers: [1, 2, 2, 3, 4, 5, 6, 7, 9]

numbers.sort(reverse=True)  # 내림차순으로 정렬 (큰 수부터 작은 수 순서)
print('numbers: ', numbers)  # numbers: [9, 7, 6, 5, 4, 3, 2, 2, 1]

# ============================================
# sorted() 함수: 원본을 변경하지 않고 정렬된 새 리스트 반환
# ============================================

original = [3, 2, 5, 7, 1]

# sorted() 함수는 원본 리스트를 변경하지 않고 정렬된 새로운 리스트를 반환
sorted_list = sorted(original)  # 오름차순으로 정렬된 새 리스트 생성
sorted_r_list = sorted(original, reverse=True)  # 내림차순으로 정렬된 새 리스트 생성

print('original: ', original)  # original: [3, 2, 5, 7, 1] (원본 리스트는 변경되지 않음)
print('sorted_list: ', sorted_list)  # sorted_list: [1, 2, 3, 5, 7]
print('sorted_r_list: ', sorted_r_list)  # sorted_r_list: [7, 5, 3, 2, 1]

# ============================================
# 내장 함수들 (리스트와 함께 사용되는 유용한 함수들)
# ============================================

numbers = [5, 2, 7, 3, 11, 45]

# max() 함수: 리스트에서 가장 큰 값을 반환
max_num = max(numbers)
print('max_num', max_num)  # max_num 45

# min() 함수: 리스트에서 가장 작은 값을 반환
min_num = min(numbers)
print('min_num', min_num)  # min_num 2

# sum() 함수: 리스트의 모든 숫자 요소들의 합계를 반환
sum_num = sum(numbers)  # 5 + 2 + 7 + 3 + 11 + 45 = 73
print('sum_num', sum_num)  # sum_num 73

# ============================================
# 추가 설명
# ============================================

"""
리스트 메서드와 함수의 차이점:
1. 메서드 (append, extend, remove, pop, clear, sort 등):
   - 리스트 객체에 직접 적용됨 (list.method())
   - 대부분 원본 리스트를 직접 수정함
   - 반환값이 None인 경우가 많음

2. 함수 (sorted, max, min, sum 등):
   - 리스트를 매개변수로 받음 (function(list))
   - 원본 리스트를 변경하지 않음
   - 결과값을 반환함

주요 활용 팁:
- 원본 리스트를 보존하고 싶다면 sorted() 함수 사용
- 메모리 효율성을 위해 원본을 직접 수정해도 된다면 sort() 메서드 사용
- remove()는 첫 번째 일치하는 요소만 제거하므로 주의
- pop()은 제거와 동시에 값을 반환하므로 제거된 값이 필요할 때 유용
"""

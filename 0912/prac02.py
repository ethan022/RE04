# ============================
# del을 사용한 리스트 요소 삭제 예제
# ============================

# ============================
# 예제 1: 슬라이싱을 이용한 범위 삭제
# ============================

fruits = ['apple', 'bananan', 'cherry', 'grape', 'watermelon', 'strawberry']
# 인덱스:  0        1         2        3       4             5
# 주의: 'bananan'은 오타 ('banana'가 정확한 철자)

print('삭제 전:', fruits)
# 출력: 삭제 전: ['apple', 'bananan', 'cherry', 'grape', 'watermelon', 'strawberry']

# del fruits[1:4] → 인덱스 1, 2, 3의 요소들을 삭제
# 삭제될 요소들: fruits[1]='bananan', fruits[2]='cherry', fruits[3]='grape'
# 슬라이싱 규칙: 시작 인덱스 포함, 끝 인덱스 미포함 (1 이상 4 미만)
del fruits[1:4]

print('삭제 후:', fruits)
# 출력: 삭제 후: ['apple', 'watermelon', 'strawberry']
# 남은 요소들: fruits[0]='apple', fruits[4]='watermelon', fruits[5]='strawberry'

print()  # 빈 줄로 구분

# ============================
# 예제 2: 리스트 반복 후 특정 인덱스 삭제
# ============================

letters = ['A', 'B']
# 인덱스: 0    1

print('원본 리스트:', letters)
# 출력: 원본 리스트: ['A', 'B']

# * 연산자로 리스트를 3번 반복
result = letters * 3
# result = ['A', 'B'] + ['A', 'B'] + ['A', 'B'] = ['A', 'B', 'A', 'B', 'A', 'B']
# 새로운 인덱스: 0    1    2    3    4    5

print('3번 반복 후:', result)
# 출력: 3번 반복 후: ['A', 'B', 'A', 'B', 'A', 'B']

# del result[2] → 인덱스 2의 요소 'A' 삭제
del result[2]
# 삭제 전: ['A', 'B', 'A', 'B', 'A', 'B']
#           0    1    2    3    4    5
# 삭제 후: ['A', 'B',      'B', 'A', 'B']  → 뒤의 요소들이 앞으로 이동
#           0    1         2    3    4

print('인덱스 2 삭제 후:', result)
# 출력: 인덱스 2 삭제 후: ['A', 'B', 'B', 'A', 'B']

print()

# ============================
# 추가 예제: 다양한 삭제 패턴
# ============================

# 예제 3: 마지막 요소 삭제
numbers = [1, 2, 3, 4, 5]
print('삭제 전 numbers:', numbers)
del numbers[-1]  # 마지막 요소 삭제 (음수 인덱스 사용)
print('마지막 요소 삭제 후:', numbers)
# 출력: 마지막 요소 삭제 후: [1, 2, 3, 4]

print()

# 예제 4: 처음과 끝 요소 동시 삭제
colors = ['red', 'green', 'blue', 'yellow', 'purple']
print('삭제 전 colors:', colors)
del colors[0]    # 첫 번째 요소 삭제
del colors[-1]   # 마지막 요소 삭제 (인덱스가 재조정됨)
print('처음과 끝 삭제 후:', colors)
# 출력: 처음과 끝 삭제 후: ['green', 'blue', 'yellow']

print()

# 예제 5: 스텝을 활용한 삭제 (주의: 뒤에서부터 삭제해야 안전)
data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print('삭제 전 data:', data)

# 짝수 인덱스 요소들을 뒤에서부터 삭제 (인덱스 변경 방지)
# 인덱스 8, 6, 4, 2, 0 순서로 삭제
for i in [8, 6, 4, 2, 0]:  # 역순으로 삭제
    del data[i]

print('짝수 인덱스 삭제 후:', data)
# 출력: 짝수 인덱스 삭제 후: [1, 3, 5, 7, 9]

# ============================
# 중요한 주의사항과 팁
# ============================

"""
del을 사용한 리스트 요소 삭제 완전 가이드:

1. 기본 문법:
   - del list[index]: 특정 인덱스 삭제
   - del list[start:end]: 범위 삭제 (start 이상 end 미만)
   - del list[start:end:step]: 스텝 간격으로 삭제

2. 삭제 후 인덱스 변화:
   - 요소 삭제 후 뒤의 모든 요소들이 앞으로 이동
   - 리스트의 길이가 감소
   - 기존 인덱스 번호가 무효화될 수 있음

3. 안전한 삭제 방법:
   - 여러 요소 삭제 시 뒤에서부터 삭제 (큰 인덱스부터)
   - 또는 삭제할 요소들을 별도로 수집 후 일괄 삭제
   - 반복문에서 삭제 시 역순으로 진행

4. del의 다양한 활용:
   - del variable: 변수 자체를 메모리에서 삭제
   - del list[:]: 리스트의 모든 요소 삭제 (빈 리스트 만들기)
   - del list[::2]: 짝수 인덱스 요소들 삭제

5. 대안 방법들:
   - list.remove(value): 값으로 삭제 (첫 번째 발견 요소만)
   - list.pop(index): 삭제하면서 반환값 받기
   - list.clear(): 모든 요소 삭제

6. 성능 고려사항:
   - 앞쪽 요소 삭제는 느림 (모든 뒤 요소들이 이동)
   - 뒤쪽 요소 삭제는 빠름
   - 대량 삭제 시에는 새 리스트 생성이 더 효율적일 수 있음

주의: 존재하지 않는 인덱스 삭제 시 IndexError 발생
"""
